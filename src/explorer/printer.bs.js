/* eslint-disable */
// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require('bs-platform/lib/js/list.js');
var $$Array = require('bs-platform/lib/js/array.js');
var Block = require('bs-platform/lib/js/block.js');
var Curry = require('bs-platform/lib/js/curry.js');
var Printf = require('bs-platform/lib/js/printf.js');
var $$String = require('bs-platform/lib/js/string.js');
var Graphql = require('graphql');
var Caml_array = require('bs-platform/lib/js/caml_array.js');
var Caml_builtin_exceptions = require('bs-platform/lib/js/caml_builtin_exceptions.js');
var Option$GraphiqlExplorer = require('../option.bs.js');
var ReGraphQL$GraphiqlExplorer = require('../graphql/ReGraphQL.bs.js');

function indent(depth) {
  return $$String.concat(
    '\t',
    $$Array.to_list(Caml_array.caml_make_vect(depth, '')),
  );
}

function printArgObject(arg) {
  var baseType = Graphql.getNamedType(arg[/* field */ 1]['type']);
  var match = Graphql.isInputObjectType(baseType);
  if (match) {
    var checkedFields = List.filter(function(param) {
      return param[1][/* checked */ 3];
    })(arg[/* children */ 5]);
    var match$1 = List.length(checkedFields);
    if (match$1 !== 0) {
      var objectFields = List.map(function(param) {
        return printArgObjectField(param[1]);
      }, checkedFields);
      return Curry._1(
        Printf.sprintf(
          /* Format */ Block.simpleVariant('Format', [
            /* Char_literal */ Block.variant('Char_literal', 12, [
              /* "{" */ 123,
              /* String */ Block.variant('String', 2, [
                /* No_padding */ 0,
                /* Char_literal */ Block.variant('Char_literal', 12, [
                  /* "}" */ 125,
                  /* End_of_format */ 0,
                ]),
              ]),
            ]),
            '{%s}',
          ]),
        ),
        $$String.concat(', ', objectFields),
      );
    } else {
      return '';
    }
  } else {
    throw [
      Caml_builtin_exceptions.failure,
      'ArgObject is not an InputObjectType, bailing',
    ];
  }
}

function printArgType(arg) {
  var baseType = Graphql.getNamedType(arg[/* field */ 1]['type']);
  var match = Graphql.isInputObjectType(baseType);
  if (match) {
    return printArgObject(arg);
  } else {
    var match$1 = Graphql.isListType(baseType);
    if (match$1) {
      return printArgList(arg);
    } else {
      var match$2 = Graphql.isScalarType(baseType);
      if (match$2) {
        return printScalar(arg);
      } else {
        var match$3 = Curry._1(
          ReGraphQL$GraphiqlExplorer
            .Schema[/* Type */ 2][/* isBooleanType */ 0],
          baseType,
        );
        if (match$3) {
          return printScalar(arg);
        } else {
          return '"UnrecognizedArgumentType"';
        }
      }
    }
  }
}

function printScalar(subField) {
  var classified = ReGraphQL$GraphiqlExplorer.classifyScalarField(
    subField[/* field */ 1],
  );
  var defaultValue = Option$GraphiqlExplorer.$$default(
    '',
    subField[/* value */ 4],
  );
  switch (classified.tag | 0) {
    case 2:
      return Curry._1(
        Printf.sprintf(
          /* Format */ Block.simpleVariant('Format', [
            /* Char_literal */ Block.variant('Char_literal', 12, [
              /* "\"" */ 34,
              /* String */ Block.variant('String', 2, [
                /* No_padding */ 0,
                /* Char_literal */ Block.variant('Char_literal', 12, [
                  /* "\"" */ 34,
                  /* End_of_format */ 0,
                ]),
              ]),
            ]),
            '"%s"',
          ]),
        ),
        defaultValue,
      );
    case 5:
      return printArgObjectField(subField);
    case 6:
      return printArgObject(subField);
    case 7:
      return 'UNKNOWN';
    default:
      return defaultValue;
  }
}

function printArgObjectField(subField) {
  return Curry._2(
    Printf.sprintf(
      /* Format */ Block.simpleVariant('Format', [
        /* String */ Block.variant('String', 2, [
          /* No_padding */ 0,
          /* String_literal */ Block.variant('String_literal', 11, [
            ': ',
            /* String */ Block.variant('String', 2, [
              /* No_padding */ 0,
              /* End_of_format */ 0,
            ]),
          ]),
        ]),
        '%s: %s',
      ]),
    ),
    subField[/* name */ 0],
    printScalar(subField),
  );
}

function printArgList(arg) {
  return Curry._1(
    Printf.sprintf(
      /* Format */ Block.simpleVariant('Format', [
        /* Char_literal */ Block.variant('Char_literal', 12, [
          /* "[" */ 91,
          /* String */ Block.variant('String', 2, [
            /* No_padding */ 0,
            /* Char_literal */ Block.variant('Char_literal', 12, [
              /* "]" */ 93,
              /* End_of_format */ 0,
            ]),
          ]),
        ]),
        '[%s]',
      ]),
    ),
    $$String.concat(
      ', ',
      List.map(function(param) {
        return printArgType(param[1]);
      }, arg[/* children */ 5]),
    ),
  );
}

function printArgEntry(_, _$1, arg) {
  var match = arg[/* checked */ 1];
  if (match) {
    var subfield = Option$GraphiqlExplorer.expect(
      'Arg subfield',
      arg[/* subField */ 4],
    );
    return Curry._2(
      Printf.sprintf(
        /* Format */ Block.simpleVariant('Format', [
          /* String */ Block.variant('String', 2, [
            /* No_padding */ 0,
            /* String_literal */ Block.variant('String_literal', 11, [
              ': ',
              /* String */ Block.variant('String', 2, [
                /* No_padding */ 0,
                /* End_of_format */ 0,
              ]),
            ]),
          ]),
          '%s: %s',
        ]),
      ),
      arg[/* name */ 0],
      printArgType(subfield),
    );
  } else {
    return '';
  }
}

function printEntry(depth, entry) {
  var match = entry[/* checked */ 1];
  if (match) {
    var field = entry[/* name */ 0];
    var checkedArgs = List.filter(function(param) {
      return param[1][/* checked */ 1];
    })(entry[/* args */ 3]);
    var args;
    if (checkedArgs) {
      var subArgs = $$String.concat(
        ', ',
        List.map(function(param) {
          return printArgEntry(entry, param[0], param[1]);
        }, checkedArgs),
      );
      args =
        subArgs === ''
          ? ''
          : Curry._1(
              Printf.sprintf(
                /* Format */ Block.simpleVariant('Format', [
                  /* Char_literal */ Block.variant('Char_literal', 12, [
                    /* "(" */ 40,
                    /* String */ Block.variant('String', 2, [
                      /* No_padding */ 0,
                      /* Char_literal */ Block.variant('Char_literal', 12, [
                        /* ")" */ 41,
                        /* End_of_format */ 0,
                      ]),
                    ]),
                  ]),
                  '(%s)',
                ]),
              ),
              subArgs,
            );
    } else {
      args = '';
    }
    var fields = entry[/* children */ 5];
    var subfields;
    if (fields) {
      var entries = List.map(function(param) {
        return printEntry((depth + 1) | 0, param[1][1]);
      }, fields);
      subfields = Curry._1(
        Printf.sprintf(
          /* Format */ Block.simpleVariant('Format', [
            /* String_literal */ Block.variant('String_literal', 11, [
              '{\n\t',
              /* String */ Block.variant('String', 2, [
                /* No_padding */ 0,
                /* Char_literal */ Block.variant('Char_literal', 12, [
                  /* "}" */ 125,
                  /* End_of_format */ 0,
                ]),
              ]),
            ]),
            '{\n\t%s}',
          ]),
        ),
        $$String.concat('\n\t', entries),
      );
    } else {
      subfields = '';
    }
    return Curry._3(
      Printf.sprintf(
        /* Format */ Block.simpleVariant('Format', [
          /* String */ Block.variant('String', 2, [
            /* No_padding */ 0,
            /* Char_literal */ Block.variant('Char_literal', 12, [
              /* " " */ 32,
              /* String */ Block.variant('String', 2, [
                /* No_padding */ 0,
                /* Char_literal */ Block.variant('Char_literal', 12, [
                  /* " " */ 32,
                  /* String */ Block.variant('String', 2, [
                    /* No_padding */ 0,
                    /* End_of_format */ 0,
                  ]),
                ]),
              ]),
            ]),
          ]),
          '%s %s %s',
        ]),
      ),
      field,
      args,
      subfields,
    );
  } else {
    return '';
  }
}

function entriesToGraphQLText(root) {
  var query;
  try {
    query = /* Some */ Block.simpleVariant('Some', [
      List.assoc('query', root[/* children */ 5]),
    ]);
  } catch (exn) {
    if (exn === Caml_builtin_exceptions.not_found) {
      query = /* None */ 0;
    } else {
      throw exn;
    }
  }
  var mutation;
  try {
    mutation = /* Some */ Block.simpleVariant('Some', [
      List.assoc('mutation', root[/* children */ 5]),
    ]);
  } catch (exn$1) {
    if (exn$1 === Caml_builtin_exceptions.not_found) {
      mutation = /* None */ 0;
    } else {
      throw exn$1;
    }
  }
  var subscription;
  try {
    subscription = /* Some */ Block.simpleVariant('Some', [
      List.assoc('Subscription', root[/* children */ 5]),
    ]);
  } catch (exn$2) {
    if (exn$2 === Caml_builtin_exceptions.not_found) {
      subscription = /* None */ 0;
    } else {
      throw exn$2;
    }
  }
  return $$String.concat(
    '\n\n',
    List.map(function(entryT) {
      if (entryT) {
        var entry = entryT[0][1];
        var checkedChildren = List.filter(function(param) {
          return param[1][1][/* checked */ 1];
        })(entry[/* children */ 5]);
        if (checkedChildren) {
          return printEntry(
            0,
            /* record */ Block.record(
              ['name', 'checked', 'field', 'args', 'path', 'children'],
              [
                entry[/* name */ 0].toLowerCase(),
                true,
                entry[/* field */ 2],
                entry[/* args */ 3],
                entry[/* path */ 4],
                entry[/* children */ 5],
              ],
            ),
          );
        } else {
          return '';
        }
      } else {
        return '';
      }
    }, /* :: */ Block.simpleVariant('::', [
      query,
      /* :: */ Block.simpleVariant('::', [
        mutation,
        /* :: */ Block.simpleVariant('::', [subscription, /* [] */ 0]),
      ]),
    ])),
  );
}

exports.indent = indent;
exports.printArgObject = printArgObject;
exports.printScalar = printScalar;
exports.printArgObjectField = printArgObjectField;
exports.printArgList = printArgList;
exports.printArgType = printArgType;
exports.printArgEntry = printArgEntry;
exports.printEntry = printEntry;
exports.entriesToGraphQLText = entriesToGraphQLText;
/* graphql Not a pure module */
