/* eslint-disable */
// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require('bs-platform/lib/js/array.js');
var Block = require('bs-platform/lib/js/block.js');
var Curry = require('bs-platform/lib/js/curry.js');
var React = require('react');
var Js_exn = require('bs-platform/lib/js/js_exn.js');
var Graphql = require('graphql');
var Pervasives = require('bs-platform/lib/js/pervasives.js');
var ReasonReact = require('reason-react/src/ReasonReact.js');
var Caml_builtin_exceptions = require('bs-platform/lib/js/caml_builtin_exceptions.js');
var Option$GraphiqlExplorer = require('../option.bs.js');
var ReGraphQL$GraphiqlExplorer = require('../graphql/ReGraphQL.bs.js');
var ReactTree$GraphiqlExplorer = require('./reactTree.bs.js');

function label(
  ctx,
  name,
  description,
  fieldPath,
  argPath,
  checked,
  depth,
  children,
) {
  var tmp = {};
  var tmp$1 =
    description == null
      ? /* None */ 0
      : Block.simpleVariant('Some', [description]);
  if (tmp$1) {
    tmp.title = tmp$1[0];
  }
  return React.createElement(
    'div',
    {
      style: {
        paddingLeft: String(depth << 2) + 'px',
      },
      onClick: function($$event) {
        $$event.stopPropagation();
        return Curry._2(ctx[/* toggleArg */ 1], fieldPath, argPath);
      },
    },
    React.createElement(
      'span',
      {
        className: 'node',
      },
      React.createElement('input', {
        checked: checked,
        readOnly: true,
        type: 'checkbox',
        onClick: function($$event) {
          $$event.stopPropagation();
          return Curry._2(ctx[/* toggleArg */ 1], fieldPath, argPath);
        },
      }),
    ),
    React.createElement('label', tmp, name, children),
  );
}

function renderScalar(ctx, fieldPath, argPath, typ, checked, _) {
  var isRequired = Graphql.isNonNullType(typ);
  var baseType = Graphql.getNamedType(typ);
  var isBoolean = Curry._1(
    ReGraphQL$GraphiqlExplorer.Schema[/* Type */ 2][/* isBooleanType */ 0],
    baseType,
  );
  if (isBoolean) {
    var tmp;
    try {
      tmp = Pervasives.bool_of_string(
        Option$GraphiqlExplorer.$$default(
          'false',
          Curry._2(ctx[/* getArgValue */ 5], fieldPath, argPath),
        ),
      );
    } catch (raw_exn) {
      var exn = Js_exn.internalToOCamlException(raw_exn);
      if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
        tmp = false;
      } else {
        throw exn;
      }
    }
    return React.createElement('input', {
      style: {
        width: '1000px',
      },
      checked: tmp,
      required: isRequired && checked,
      type: 'checkbox',
      onChange: function() {
        var match = Curry._2(ctx[/* getArgValue */ 5], fieldPath, argPath);
        var newValue = match && match[0] === 'true' ? 'false' : 'true';
        return Curry._3(
          ctx[/* setArgValue */ 6],
          fieldPath,
          argPath,
          /* Some */ Block.simpleVariant('Some', [newValue]),
        );
      },
      onClick: function($$event) {
        $$event.stopPropagation();
        return /* () */ 0;
      },
    });
  } else {
    var tmp$1 = {
      required: isRequired && checked,
      type: 'text',
      onChange: function($$event) {
        var newValue$prime = $$event.target.value;
        var newValue =
          newValue$prime === ''
            ? /* None */ 0
            : /* Some */ Block.simpleVariant('Some', [newValue$prime]);
        return Curry._3(ctx[/* setArgValue */ 6], fieldPath, argPath, newValue);
      },
      onClick: function($$event) {
        $$event.stopPropagation();
        return /* () */ 0;
      },
    };
    var tmp$2 = Curry._2(ctx[/* getArgValue */ 5], fieldPath, argPath);
    if (tmp$2) {
      tmp$1.value = tmp$2[0];
    }
    return React.createElement('input', tmp$1);
  }
}

function renderEnum(key, ctx, fieldPath, argPath, typ, _, _$1) {
  var match = Curry._1(
    ReGraphQL$GraphiqlExplorer.Schema[/* Type */ 2][/* toEnumType */ 1],
    typ,
  );
  var enumType;
  if (match) {
    enumType = match[0];
  } else {
    throw [
      Caml_builtin_exceptions.failure,
      'Non-enum type made it through to renderEnum: ' + typ.name,
    ];
  }
  var values = enumType.getValues();
  var value = Curry._2(ctx[/* getArgValue */ 5], fieldPath, argPath);
  var tmp = {
    key: key,
    onChange: function($$event) {
      return Curry._3(
        ctx[/* setArgValue */ 6],
        fieldPath,
        argPath,
        /* Some */ Block.simpleVariant('Some', [$$event.target.value]),
      );
    },
    onClick: function($$event) {
      $$event.stopPropagation();
      return /* () */ 0;
    },
  };
  if (value) {
    tmp.value = value[0];
  }
  return React.createElement(
    'select',
    tmp,
    $$Array.mapi(function(idx, value) {
      return React.createElement(
        'option',
        {
          key: String(idx),
          value: value.name,
        },
        value.name,
      );
    }, values),
  );
}

function renderObject(ctx, fieldPath, argPath, depth, obj, _) {
  return React.createElement(
    'div',
    undefined,
    $$Array.mapi(function(idx, field) {
      var argPath$1 = argPath + ('.' + field.name);
      var checked = Curry._2(ctx[/* isArgChecked */ 4], fieldPath, argPath$1);
      var typ = Graphql.getNamedType(field['type']);
      var isObject = Graphql.isInputObjectType(typ);
      var isScalar = Graphql.isScalarType(typ);
      var isEnum = Graphql.isEnumType(typ);
      var match = isObject && checked;
      return ReasonReact.element(
        /* Some */ Block.simpleVariant('Some', [String(idx)]),
        /* None */ 0,
        ReactTree$GraphiqlExplorer.make(
          React.createElement(
            'div',
            undefined,
            label(
              ctx,
              field.name,
              field.description,
              fieldPath,
              argPath$1,
              checked,
              (depth + 1) | 0,
              isScalar
                ? isEnum
                  ? /* array */ []
                  : checked
                  ? /* array */ [
                      renderScalar(
                        ctx,
                        fieldPath,
                        argPath$1,
                        typ,
                        checked,
                        /* () */ 0,
                      ),
                    ]
                  : /* array */ []
                : isEnum
                ? checked
                  ? /* array */ [
                      renderEnum(
                        String(idx),
                        ctx,
                        fieldPath,
                        argPath$1,
                        typ,
                        checked,
                        /* () */ 0,
                      ),
                    ]
                  : /* array */ []
                : /* array */ [],
            ),
          ),
          /* array */ [
            match
              ? renderObject(
                  ctx,
                  fieldPath,
                  argPath$1,
                  (depth + 1) | 0,
                  typ,
                  /* () */ 0,
                )
              : null,
          ],
        ),
      );
    }, Curry._1(
      ReGraphQL$GraphiqlExplorer.Schema[/* ObjectType */ 4][/* getFields */ 0],
      obj,
    )),
  );
}

var component = ReasonReact.statelessComponent(
  'GraphiQL.Explorer.TreeEntry.ArgEntry',
);

function make(ctx, arg, fieldPath, depth, _) {
  return /* record */ Block.record(
    [
      'debugName',
      'reactClassInternal',
      'handedOffState',
      'willReceiveProps',
      'didMount',
      'didUpdate',
      'willUnmount',
      'willUpdate',
      'shouldUpdate',
      'render',
      'initialState',
      'retainedProps',
      'reducer',
      'jsElementWrapped',
    ],
    [
      component[/* debugName */ 0],
      component[/* reactClassInternal */ 1],
      component[/* handedOffState */ 2],
      component[/* willReceiveProps */ 3],
      component[/* didMount */ 4],
      component[/* didUpdate */ 5],
      component[/* willUnmount */ 6],
      component[/* willUpdate */ 7],
      component[/* shouldUpdate */ 8],
      function() {
        var argPath = arg.name;
        var checked = Curry._2(ctx[/* isArgChecked */ 4], fieldPath, argPath);
        var typ = Graphql.getNamedType(arg['type']);
        var outerType = arg['type'];
        var isRequired = Graphql.isNonNullType(outerType);
        var requiredMarker = isRequired ? '*:' : ':';
        var isObject = Graphql.isInputObjectType(typ);
        var isScalar = Graphql.isScalarType(typ);
        var match = isScalar && checked;
        var match$1 = isObject && checked;
        return ReasonReact.element(
          /* None */ 0,
          /* None */ 0,
          ReactTree$GraphiqlExplorer.make(
            React.createElement(
              'div',
              undefined,
              label(
                ctx,
                arg.name + requiredMarker,
                arg.description,
                fieldPath,
                argPath,
                checked,
                depth,
                match
                  ? /* array */ [
                      renderScalar(
                        ctx,
                        fieldPath,
                        argPath,
                        typ,
                        checked,
                        /* () */ 0,
                      ),
                    ]
                  : /* array */ [],
              ),
            ),
            /* array */ [
              match$1
                ? renderObject(ctx, fieldPath, argPath, depth, typ, /* () */ 0)
                : null,
            ],
          ),
        );
      },
      component[/* initialState */ 10],
      component[/* retainedProps */ 11],
      component[/* reducer */ 12],
      component[/* jsElementWrapped */ 13],
    ],
  );
}

exports.label = label;
exports.renderScalar = renderScalar;
exports.renderEnum = renderEnum;
exports.renderObject = renderObject;
exports.component = component;
exports.make = make;
/* component Not a pure module */
