/* eslint-disable */
// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require('bs-platform/lib/js/array.js');
var Block = require('bs-platform/lib/js/block.js');
var Curry = require('bs-platform/lib/js/curry.js');
var React = require('react');
var $$String = require('bs-platform/lib/js/string.js');
var ReasonReact = require('reason-react/src/ReasonReact.js');
var ArgEntry$GraphiqlExplorer = require('./argEntry.bs.js');
var ReactTree$GraphiqlExplorer = require('./reactTree.bs.js');

var component = ReasonReact.statelessComponent('GraphiQL.Explorer.TreeEntry');

function argEntry(key, ctx, path, arg, depth) {
  return ReasonReact.element(
    /* Some */ Block.simpleVariant('Some', [String(key)]),
    /* None */ 0,
    ReactTree$GraphiqlExplorer.make(
      null,
      /* array */ [
        ReasonReact.element(
          /* None */ 0,
          /* None */ 0,
          ArgEntry$GraphiqlExplorer.make(
            ctx,
            arg,
            path,
            (depth + 1) | 0,
            /* array */ [],
          ),
        ),
      ],
    ),
  );
}

function label(ctx, field, path, checked, depth) {
  var match = field.args;
  return React.createElement(
    'div',
    {
      style: {
        paddingLeft: String(depth << 2) + 'px',
        width: '1000px',
      },
      onClick: function($$event) {
        $$event.stopPropagation();
        return Curry._1(ctx[/* toggleField */ 2], path);
      },
    },
    React.createElement(
      'span',
      {
        className: 'node',
      },
      React.createElement('input', {
        checked: checked,
        readOnly: true,
        type: 'checkbox',
      }),
      field.name,
    ),
    match.length !== 0 && checked
      ? $$Array.mapi(function(idx, arg) {
          return React.createElement(
            'div',
            {
              key: String(idx),
              style: {
                backgroundColor: 'rgb(241, 241, 241)',
                marginLeft: String((16 + (depth << 3)) | 0) + 'px',
                borderRadius: '4px',
              },
            },
            argEntry(idx, ctx, path, arg, depth),
          );
        }, match)
      : null,
  );
}

function make(ctx, field, path, currentObject, subFieldsFor, $staropt$star, _) {
  var depth = $staropt$star ? $staropt$star[0] : 0;
  return /* record */ Block.record(
    [
      'debugName',
      'reactClassInternal',
      'handedOffState',
      'willReceiveProps',
      'didMount',
      'didUpdate',
      'willUnmount',
      'willUpdate',
      'shouldUpdate',
      'render',
      'initialState',
      'retainedProps',
      'reducer',
      'jsElementWrapped',
    ],
    [
      component[/* debugName */ 0],
      component[/* reactClassInternal */ 1],
      component[/* handedOffState */ 2],
      component[/* willReceiveProps */ 3],
      component[/* didMount */ 4],
      component[/* didUpdate */ 5],
      component[/* willUnmount */ 6],
      component[/* willUpdate */ 7],
      component[/* shouldUpdate */ 8],
      function() {
        var checked = Curry._1(ctx[/* isFieldChecked */ 3], path);
        var tmp;
        if (checked) {
          var match = Curry._2(subFieldsFor, currentObject, field.name);
          var subFields = match[1];
          var nextType = match[0];
          $$Array.sort(function(fieldA, fieldB) {
            return $$String.compare(fieldA.name, fieldB.name);
          }, subFields);
          tmp = $$Array.mapi(function(idx, nextField) {
            return ReasonReact.element(
              /* Some */ Block.simpleVariant('Some', [String(idx)]),
              /* None */ 0,
              make(
                ctx,
                nextField,
                path + ('.' + nextField.name),
                nextType,
                subFieldsFor,
                /* Some */ Block.simpleVariant('Some', [(depth + 1) | 0]),
                /* array */ [],
              ),
            );
          }, subFields);
        } else {
          tmp = null;
        }
        return ReasonReact.element(
          /* None */ 0,
          /* None */ 0,
          ReactTree$GraphiqlExplorer.make(
            React.createElement(
              'div',
              undefined,
              label(ctx, field, path, checked, depth),
            ),
            /* array */ [tmp],
          ),
        );
      },
      component[/* initialState */ 10],
      component[/* retainedProps */ 11],
      component[/* reducer */ 12],
      component[/* jsElementWrapped */ 13],
    ],
  );
}

var GQL = 0;

exports.GQL = GQL;
exports.component = component;
exports.argEntry = argEntry;
exports.label = label;
exports.make = make;
/* component Not a pure module */
