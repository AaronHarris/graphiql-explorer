/* eslint-disable */
// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require('bs-platform/lib/js/array.js');
var Block = require('bs-platform/lib/js/block.js');
var Curry = require('bs-platform/lib/js/curry.js');
var Js_dict = require('bs-platform/lib/js/js_dict.js');
var Graphql = require('graphql');
var Caml_array = require('bs-platform/lib/js/caml_array.js');
var Js_primitive = require('bs-platform/lib/js/js_primitive.js');

var Arg = /* module */ Block.localModule([], []);

var SelectionSet = /* module */ Block.localModule([], []);

var Definition = /* module */ Block.localModule([], []);

var Document = /* module */ Block.localModule(
  ['Arg', 'SelectionSet', 'Definition'],
  [Arg, SelectionSet, Definition],
);

function baseTypeNameFromString(typeName) {
  return ''.replace(/[\[\]!]/, typeName);
}

var Introspection = /* module */ Block.localModule([], []);

var Value = /* module */ Block.localModule([], []);

var Enum = /* module */ Block.localModule(['Value'], [Value]);

function isBooleanType(t) {
  var baseType = Graphql.getNamedType(t);
  return baseType.name === 'Boolean';
}

function toEnumType(t) {
  var match = Graphql.isEnumType(t);
  if (match) {
    return /* Some */ Block.simpleVariant('Some', [t]);
  } else {
    return /* None */ 0;
  }
}

var Type = /* module */ Block.localModule(
  ['isBooleanType', 'toEnumType'],
  [isBooleanType, toEnumType],
);

var Arg$1 = /* module */ Block.localModule([], []);

function argByName(t, name) {
  var args = t.args;
  var max = args.length;
  var _idx = 0;
  while (true) {
    var idx = _idx;
    var match = idx < max;
    if (match) {
      var match$1 = Caml_array.caml_array_get(args, idx).name === name;
      if (match$1) {
        return /* Some */ Block.simpleVariant('Some', [
          Caml_array.caml_array_get(args, idx),
        ]);
      } else {
        _idx = (idx + 1) | 0;
        continue;
      }
    } else {
      return /* None */ 0;
    }
  }
}

function fieldsForType(obj) {
  try {
    return Js_dict.values(obj.getFields());
  } catch (exn) {
    return /* array */ [];
  }
}

function fieldForType(obj, name) {
  return Js_primitive.undefined_to_opt(obj.getFields()[name]);
}

function argFieldByPath(field, path) {
  var args = field.args;
  if (path) {
    var argPath = path[1];
    var argName = path[0];
    var targetArg = $$Array.fold_left(
      function(acc, next) {
        if (acc) {
          return acc;
        } else {
          var match = next.name === argName;
          if (match) {
            return /* Some */ Block.simpleVariant('Some', [next]);
          } else {
            return /* None */ 0;
          }
        }
      },
      /* None */ 0,
      args,
    );
    if (targetArg) {
      var argType = Graphql.getNamedType(targetArg[0]['type']);
      var match = Graphql.isInputObjectType(argType);
      if (match && argPath) {
        var nextField = fieldForType(argType, argPath[0]);
        var _field = nextField;
        var _remainingPath = argPath[1];
        while (true) {
          var remainingPath = _remainingPath;
          var field$1 = _field;
          if (remainingPath) {
            var nextField$1 = fieldForType(argType, remainingPath[0]);
            _remainingPath = remainingPath[1];
            _field = nextField$1;
            continue;
          } else {
            return field$1;
          }
        }
      } else {
        return /* None */ 0;
      }
    } else {
      return /* None */ 0;
    }
  } else {
    return /* None */ 0;
  }
}

var Field = /* module */ Block.localModule(
  ['Arg', 'argByName', 'fieldsForType', 'fieldForType', 'argFieldByPath'],
  [Arg$1, argByName, fieldsForType, fieldForType, argFieldByPath],
);

function getFields(obj) {
  return Js_dict.values(obj.getFields());
}

function getField(obj, fieldName) {
  return Js_primitive.undefined_to_opt(obj.getFields()[fieldName]);
}

var ObjectType = /* module */ Block.localModule(
  ['getFields', 'getField'],
  [getFields, getField],
);

var Schema = /* module */ Block.localModule(
  ['Introspection', 'Enum', 'Type', 'Field', 'ObjectType'],
  [Introspection, Enum, Type, Field, ObjectType],
);

function classifyScalarType(typ) {
  var baseType = Graphql.getNamedType(typ);
  var _other = baseType.name;
  switch (_other) {
    case 'Boolean':
      return /* BooleanType */ Block.variant('BooleanType', 4, [typ]);
    case 'Float':
    case 'Int':
      return /* IntType */ Block.variant('IntType', 0, [typ]);
    case 'String':
      return /* StringType */ Block.variant('StringType', 2, [typ]);
    default:
      var match = Graphql.isEnumType(baseType);
      if (match) {
        return /* EnumType */ Block.variant('EnumType', 3, [typ]);
      } else {
        var match$1 = Graphql.isObjectType(baseType);
        if (match$1) {
          return /* ObjectType */ Block.variant('ObjectType', 5, [typ]);
        } else {
          var match$2 = Graphql.isInputObjectType(baseType);
          if (match$2) {
            return /* InputObjectType */ Block.variant('InputObjectType', 6, [
              typ,
            ]);
          } else {
            return /* OtherType */ Block.variant('OtherType', 7, [typ]);
          }
        }
      }
  }
}

function classifyScalarField(field) {
  var baseType = Graphql.getNamedType(field['type']);
  var _other = classifyScalarType(baseType);
  switch (_other.tag | 0) {
    case 0:
      return /* IntField */ Block.variant('IntField', 0, [field]);
    case 1:
      return /* FloatField */ Block.variant('FloatField', 1, [field]);
    case 2:
      return /* StringField */ Block.variant('StringField', 2, [field]);
    case 3:
      return /* EnumField */ Block.variant('EnumField', 3, [field]);
    case 4:
      return /* BooleanField */ Block.variant('BooleanField', 4, [field]);
    case 5:
      return /* ObjectField */ Block.variant('ObjectField', 5, [field]);
    case 6:
      return /* InputObjectField */ Block.variant('InputObjectField', 6, [
        field,
      ]);
    case 7:
      var match = Graphql.isEnumType(baseType);
      if (match) {
        return /* EnumField */ Block.variant('EnumField', 3, [field]);
      } else {
        return /* OtherField */ Block.variant('OtherField', 7, [field]);
      }
  }
}

var stringify = function(r) {
  const r2 = {...r, toJSON: null};
  return JSON.stringify(r2, null, 2);
};

var stringifyType = Curry.__1(stringify);

var stringifyField = Curry.__1(stringify);

var stringifyArg = Curry.__1(stringify);

var stringifyObject = Curry.__1(stringify);

function logQueryFields(schema) {
  var match = schema.getQueryType();
  if (match == null) {
    return /* () */ 0;
  } else {
    var fields = Js_dict.values(match.getFields());
    console.log('-----Log test-----');
    console.log('queryType: ', match);
    console.log('fields: ', fields);
    return $$Array.iter(function(field) {
      console.log('Field: ', field.name, field, field['type']);
      return /* () */ 0;
    }, fields);
  }
}

exports.Document = Document;
exports.baseTypeNameFromString = baseTypeNameFromString;
exports.Schema = Schema;
exports.classifyScalarType = classifyScalarType;
exports.classifyScalarField = classifyScalarField;
exports.stringify = stringify;
exports.stringifyType = stringifyType;
exports.stringifyField = stringifyField;
exports.stringifyArg = stringifyArg;
exports.stringifyObject = stringifyObject;
exports.logQueryFields = logQueryFields;
/* stringify Not a pure module */
